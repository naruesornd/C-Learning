Report-9

1. Read sections 2.9-2.10
Read. In section 2.9, I learnt about what bitwise operations (&, |, ^, <<, >> and ~) are and how they are used. 
These operations required knowledge of binary number and logic gates (AND, OR, NOT and XOR), so I looked into them on the internet. 
In section 2.10, I learnt about assignemnt operators and expressions. For instance, "i = i + 2" can be written as "i += 2".

2. Do exercises from these sections.
Done. At first, I merely understood about bitwise operators as I had no fundamental of binary numbers. 
After surfing on the internet, I finally grasped the idea and was able to do the excercises. 

****Note: I used scanf in function showbin in order to show the the binary of the decimal when we enter that decimal.
          I know that I have yet reached the scanf part, but I watched how scanf can be used in youtube, 
          and found out that it suited what I need in function showbin, so I decided to use it.


Explaination for Ex 2.9: why "x &= (x-1)" deletes the rightmost 1-bit in x?

"x &= (x-1)" can be written as "x = x & (x-1)"
"x-1" means that any binary number or "x" will be subtracted by 0001.

Therefore, "x-1" has the ability to change the rightmost 1-bit to 0-bit 
or in other words, deletes the rightmost 1-bit.

To illustrate:

Assuming x = 5

x = 5 = 0000 0101

x-1 =   0000 0101
       -0000 0001
      --------------
        0000 0100
      --------------

As we can see, the rightmost 1-bit is inverted to 0-bit when "x-1". 
Hence, "x &= (x-1)" will always set the last bit to 0. 


Naruesorn Dechnorachai
20/7/2020


